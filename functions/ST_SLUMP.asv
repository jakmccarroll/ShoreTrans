%% [z_temp, SLUMP]= ST_SLUMP(x0, z_temp, OPT, Xi)
% 31/12/2019, RJM
% Called by: ST_MAIN.
% Applies an angle of repose to an eroding dune, to avoid a vertical sand
% cliff.
%
% INPUTS
    % x0, z_temp -> input profile (x,z-coords)
    % OPT -> structure with all the profile translation settings (see
        % EMBf_profTrans_MAIN)
    % Xi -> translation distance (e.g. Xi=-30 is onshore translation of 30m)
        % Xi is generated by a loop in EMBf_profTrans_MAIN
% OUTPUTS
    % z_temp -> output profile (revised z-coords)
%

function [z_temp, SLUMP, z_maxSlump] = ST_SLUMP(x0, z0, z_temp, OPT)

%% Extract variables from OPT structure

if nargin == 4
%     ToCr_level  = OPT.toeCrest_level;
%     ToCr_ind    = OPT.toeCrest_ind;
%     DoC         = OPT.DoC;
%     DoC_ind     = OPT.DoC_ind;
%     redist_ratio= OPT.redist_ratio;

    wall        = OPT.wallSwitch;
    wall_ind    = OPT.wall_ind;
    wall_level  = OPT.wall_level;

    rock        = OPT.rockSwitch;
    z_rock      = OPT.rockLayer;
    duneSlope   = OPT.duneSlope;
    cap         = OPT.slumpCap;
    
elseif nargin == 3
    rock        = 0;
    duneSlope   = 30;    
    cap         = 20; % ignore steep slopes above this z-level (prevent slump for cliffs high in the dunes)

end

%   rock        = 0;     duneSlope   = 30;    
dx          = x0(2) - x0(1);
z_noSlump=z_temp;
z_maxSlump = nan .* zeros(size(z0)); % Set this later if it's needed

%% AUTO-FIND "SAND CLIFF" LOCATION(S)

dx1 = [0; diff(x0)];
dz1 = [0; -diff(z_temp)];
    % the negative (-diff) and the leading "0", makes it going from right-to-left
    % i.e. the angle will be the bottom to top of cliff moving onshore
duneAngles = atan2d(dz1, dx1);

ind_cliff = find(duneAngles > duneSlope & z_temp<cap);

%% FIND MAX SLUMP, IF THERE IS A WALL
% if a BURIED WALL exists, find the slump onshore of the wall
% ... then later on, prevent the slump from going below this
% ... this could be considered the MAX ONSHORE EROSION
% Based on the assumption that wave can't erode onshore of a defined wall/cliff.
%
% THIS COULD BE A SEPARATE FUNCTION AS IT DOESN'T CHANGE WITH Z_TEMP

if wall==1 %% && z0(wall_ind)>z_rock(wall_ind)
	z_maxSlump = z0; % z_maxSlump, onshore of wall is the original z0 surface
% 	z_maxSlump(wall_ind:end) = z_rock(wall_ind:end); % offshore of wall it's down to rock
    z_maxSlump(wall_ind:end) = nan; % changed (9/6/2020) after issues with rocks offshore, when NE-layer turned off

    ind2 = wall_ind - 1; %  top of wall/cliff (go 1 pt onshore just to be safe)
    ind1 = ind2 - 1;     % onshore pt  -> (1 pt onshore of the last pt)

    z_wall_temp2 = z_rock(ind2); % pt at top of wall (rock surface)
    z_wall_temp1 = z0(ind1);     %... to point on surface and 1 pt onshore
    dz_wall = z_wall_temp1 - z_wall_temp2;

    maxSlumpAngle1 = abs(atan2d(dz_wall, dx));

    if maxSlumpAngle1 > duneSlope % if the current angle is greater than duneSlope, then slump...
        maxSlumpAngle2=maxSlumpAngle1;
        duneOffPts=0;
    %     duneOffPts=3

        while maxSlumpAngle2 > duneSlope % iterate until dune slope drops below set max (duneSlope)
            duneOffPts = duneOffPts + 1;

            maxSlumpAngle2 = atan2d( z0(ind1 - duneOffPts) - z_wall_temp2, ...
                (x0(ind2) - x0(ind1 - duneOffPts)) )   ;
        end

        % Apply dune slumping (TO FIND MAX SLUMP ABOVE WALL)...
        st=ind1 - duneOffPts;
        en=ind2;

        % interp from surface down the slope (duneSlope) to wall
        z_maxSlump(st : en) = interp1([x0(st), x0(en)],...
            [z0(st), z_rock(en)], x0(st:en) );
    end

end


%% APPLY SLUMP 
% Finds angles > duneSlope ...
% ... then uses a while loop to decrease the slope ONSHORE of this point,...
% ... until the SLOPE is less than duneSlope

if ~isempty(ind_cliff)
    
    
    for i=1:length(ind_cliff)
        % i=1
        ind2 = ind_cliff(i); % offshore pt -> base of sand cliff
        ind1 = ind2 - 1;     % onshore pt  -> top of sand cliff
        duneAngle1 = duneAngles(ind_cliff(i));
        
        if duneAngle1 > duneSlope % if the current angle is greater than duneSlope, then slump...
            duneAngle2=duneAngle1;
            duneOffPts=0;
        %     duneOffPts=3

            try
                while duneAngle2 > duneSlope % iterate until dune slope drops below set max (duneSlope)
                    duneOffPts = duneOffPts + 1;

                    duneAngle2 = atan2d( z_noSlump(ind1 - duneOffPts) - z_noSlump(ind2), ...
                        (x0(ind2) - x0(ind1 - duneOffPts)) )   ;
                end
                % while loop ends after reqd slope reached, SAVE DUNE values
            catch
                error(['Error in EMBf_profTrans_SLUMP: Ran out of profile to slump dune back, ' 10 ...
                    'try increasing onshore extent of profile.']);
%                 duneOffPts = duneOffPts - 1; % Run out of room? Take last available pt
%                 duneAngle2 = atan2d( z_noSlump(ind1 - duneOffPts) - z_noSlump(ind2), ...
%                     (x0(ind2) - x0(ind1 - duneOffPts)) )   ;
            end

            % Assign values to output stucture (SLUMP)
            SLUMP(i,1).duneOffPts=duneOffPts;
            SLUMP(i,1).duneAngle1=duneAngle1;
            SLUMP(i,1).duneAngle2=duneAngle2;

            % Apply dune slumping...
            st=ind1 - duneOffPts;
            en=ind2;
            z_temp(st : en) = interp1([x0(st), x0(en)],...
                [z_noSlump(st), z_noSlump(en)], x0(st:en) );

            % ROCK CHECK
            if rock == 1
                ind3 = find(z_temp<z_rock);
                z_temp(ind3)=z_rock(ind3);
            end
            
            % MAX SLUMP CHECK (if there is a WALL)
            if wall==1
                ind = find(z_temp < z_maxSlump);
                z_temp(ind) = z_maxSlump(ind);
            end
            
     
        end    
    end
    
elseif isempty(ind_cliff)
    SLUMP.duneOffPts=0;
    SLUMP.duneAngle1=max(duneAngles);  
end



%%


